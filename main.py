from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from dotenv import load_dotenv

import os
import buttons
import datetime
import sqlite3
import asyncio
import random

load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot)


class Form(StatesGroup):
    user_data = State()
    al_homework = State()
    ge_homework = State()
    ch_homework = State()
    ph_homework = State()
    en_homework = State()
    uk_homework = State()
    fr_homework = State()


# –°–æ–∑–¥–∞–Ω–∏–µ –±–¥ –∏ —Ç–∞–±–ª–∏—Ü || Create bd and tables
def create_db():
    conn = sqlite3.connect('UsersData.sql')
    cursor = conn.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS members (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, surname TEXT, 
        number_of_class INTEGER, letter_of_class TEXT, user_name TEXT)""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS dz (id INTEGER PRIMARY KEY AUTOINCREMENT, subject TEXT UNIQUE, 
        homework TEXT, today TEXT)""")
    conn.commit()
    conn.close()


create_db()


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ü—Ä–∏–≤—ñ—Ç –ø—É–ø—Å–∏–∫üòèüòè! –¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ç–∞ –∑–∞–ø–∏—Å—É–≤–∞–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ "
                             "–∑–∞–≤–¥–∞–Ω–Ω—è! \n–ê–ª–µ –ø–µ—Ä–µ–¥ —É—Å—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –∫—Ä–æ–∫—ñ–≤"
                             "\n–ù–∞–ø–∏—à–∏ <i><b>/reg</b></i> –¥–ª—è —Ç–æ–≥–æ —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", parse_mode='HTML')


# Start to log in user after command: /next
@dp.message(Command("reg"))
async def next_step(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        conn = sqlite3.connect("UsersData.sql")
        cursor = conn.cursor()
        cursor.execute("""SELECT user_name FROM members""")
        user_name = cursor.fetchall()
        conn.commit()
        conn.close()
        if message.from_user.username not in str(user_name):
            await message.answer("–û–∫–µ–π! –î–∞–ª—ñ –Ω–∞–ø–∏—à–∏ –≤ —Ç–∞–∫—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —Å–≤–æ—î —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, —Ä—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è, "
                                 "–ª—ñ—Ç–µ—Ä—É –∫–ª–∞—Å—É.\n(–ß–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: i–º'—è –ø—Äi–∑–≤–∏—â–µ —Äi–∫ –ªi—Ç–µ—Ä–∞)")
            await state.set_state(Form.user_data)
        else:
            await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
            return


@dp.message(Form.user_data)
async def write_data(message: types.Message, state: FSMContext):
    conn = sqlite3.connect("UsersData.sql")
    cursor = conn.cursor()
    cursor.execute("""SELECT user_name FROM members""")
    user_name = cursor.fetchall()
    conn.commit()
    conn.close()
    user_data = message.text.split(' ') or message.text.split(',')
    await state.update_data(user_data=user_data)
    if message.chat.type == 'private':
        if message.from_user.username not in user_name:
            conn = sqlite3.connect('UsersData.sql')
            cursor = conn.cursor()
            cursor.execute("""INSERT OR IGNORE INTO members (name, surname, number_of_class, 
                                                                      letter_of_class, user_name) VALUES (?, ?, ?, ?, ?)""",
                           (user_data[0], user_data[1], user_data[2], user_data[3], message.from_user.username))
            conn.commit()

            await message.answer(
                "–¢–µ–ø–µ—Ä –≤–∏ —É —Å–∏—Å—Ç–µ–º—ñ, –≤—ñ—Ç–∞—éüòÅüëç!! \n–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç —Ç–∞ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∑–Ω–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è",
                reply_markup=buttons.subjects)
            await state.clear()
        else:
            return
        conn.commit()
        conn.close()


# Start to add subject
@dp.message(Command("homework"))
async def add_subject(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏\n–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç —Ç–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ –∞–±–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è",
                             reply_markup=buttons.subjects)


@dp.callback_query(lambda x: x.data == 'algebra' or x.data == 'geometry' or x.data == 'chemistry' or x.data == 'physics' or x.data == 'english' or x.data == 'ukrainian' or x.data == 'french')
async def decor(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        await call.message.answer('–õ—é–±–ª—é –ú–∞–∫—Å–∏–º—á–∏–∫–∞<3<3<3üòç‚ù§Ô∏èüíïüòçüíïüòòüòçüíï')


# On Inline Button "–ê–ª–≥–µ–±—Ä–∞"
@dp.callback_query(lambda x: x.data == 'al_add')
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("UsersData.sql")
    cursor = conn.cursor()
    cursor.execute("""SELECT user_name FROM members""")
    user_name = cursor.fetchall()
    conn.commit()
    conn.close()
    if call.message.chat.type == 'private':
        if call.from_user.username in str(user_name):
            await call.message.answer('–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–ª–≥–µ–±—Ä–∏!\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')
            await state.set_state(Form.al_homework)
        elif call.from_user.username not in user_name:
            await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!\n–ù–∞–ø–∏—à–∏ <b><i>/reg</i></b> –¥–ª—è —Ç–æ–≥–æ —â–æ–± '
                                      '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', parse_mode='HTML')


@dp.message(Form.al_homework)
async def set_homework(message: types.Message, state: FSMContext):
    d = str(datetime.date.today()).split('-')
    date = str(d[0] + '.' + d[1] + '.' + d[2])

    await state.update_data(al_homework=message.text)

    if message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''INSERT OR IGNORE INTO dz (subject) VALUES (?)''',
                       ('Algebra',))
        cursor.execute('''UPDATE OR IGNORE dz SET homework=?, today=? WHERE subject=?''',
                       (message.text, date, 'Algebra'))
        conn.commit()
        conn.close()
        await message.answer('–î–æ–º–∞—à–∫—É –∑ –∞–ª–≥–µ–±—Ä–∏ –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ!')
        await state.clear()
    else:
        return


@dp.callback_query(lambda x: x.data == 'al_show')
async def process_callback_button2(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM dz WHERE subject=?''', ('Algebra',))
        homework = cursor.fetchall()
        print(homework)
        conn.commit()
        conn.close()
        if homework:
            await call.message.answer(
                f'–û—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–ª–≥–µ–±—Ä–∏:\n  <b>{homework[0][2]}</b>\n–î–∞—Ç–∞: {homework[0][3]}',
                parse_mode='HTML')
        else:
            await call.message.answer('–î–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–ª–≥–µ–±—Ä–∏ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞ü•≥ü•≥ü•≥!')


@dp.callback_query(lambda x: x.data == 'gm_add')
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("UsersData.sql")
    cursor = conn.cursor()
    cursor.execute("""SELECT user_name FROM members""")
    user_name = cursor.fetchall()
    conn.commit()
    conn.close()
    if call.message.chat.type == 'private':
        if call.from_user.username in str(user_name):
            await call.message.answer('–§–∞–π–Ω–æ, –∑–∞–ø–∏—à–µ–º–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó!\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')
            await state.set_state(Form.ge_homework)
        elif call.from_user.username not in user_name:
            await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!\n–ù–∞–ø–∏—à–∏ <b><i>/reg</i></b> –¥–ª—è —Ç–æ–≥–æ —â–æ–± '
                                      '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', parse_mode='HTML')


@dp.message(Form.ge_homework)
async def set_homework(message: types.Message, state: FSMContext):
    d = str(datetime.date.today()).split('-')
    date = str(d[0] + '.' + d[1] + '.' + d[2])
    await state.update_data(ge_homework=message.text)

    if message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''INSERT OR IGNORE INTO dz (subject) VALUES (?)''',
                       ('Geometry',))
        cursor.execute('''UPDATE OR IGNORE dz SET homework=?, today=? WHERE subject=?''',
                       (message.text, date, 'Geometry'))
        conn.commit()
        conn.close()
        await message.answer('–î–æ–º–∞—à–∫—É –∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ!')
        await state.clear()
    else:
        return


@dp.callback_query(lambda x: x.data == 'gm_show')
async def process_callback_button2(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM dz WHERE subject=?''', ('Geometry',))
        homework = cursor.fetchall()
        print(homework)
        conn.commit()
        conn.close()
        if homework:
            await call.message.answer(
                f'–û—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó:\n  <b>{homework[0][2]}</b>\n–î–∞—Ç–∞: {homework[0][3]}',
                parse_mode='HTML')
        else:
            await call.message.answer('–î–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞ü•≥ü•≥ü•≥!')


@dp.callback_query(lambda x: x.data == 'ch_add')
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("UsersData.sql")
    cursor = conn.cursor()
    cursor.execute("""SELECT user_name FROM members""")
    user_name = cursor.fetchall()
    conn.commit()
    conn.close()
    if call.message.chat.type == 'private':
        if call.from_user.username in str(user_name):
            await call.message.answer('–ñ–∞—Ö, –∑–∞–ø–∏—à–µ–º–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ö—ñ–º—ñ—ó!\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')
            await state.set_state(Form.ch_homework)
        elif call.from_user.username not in user_name:
            await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!\n–ù–∞–ø–∏—à–∏ <b><i>/reg</i></b> –¥–ª—è —Ç–æ–≥–æ —â–æ–± '
                                      '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', parse_mode='HTML')


@dp.message(Form.ch_homework)
async def set_homework(message: types.Message, state: FSMContext):
    d = str(datetime.date.today()).split('-')
    date = str(d[0] + '.' + d[1] + '.' + d[2])

    print(date)
    await state.update_data(ch_homework=message.text)

    if message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''INSERT OR IGNORE INTO dz (subject) VALUES (?)''',
                       ('Chemistry',))
        cursor.execute('''UPDATE OR IGNORE dz SET homework=?, today=? WHERE subject=?''',
                       (message.text, date, 'Chemistry'))
        conn.commit()
        conn.close()
        await message.answer('–î–æ–º–∞—à–∫—É –∑ —Ö—ñ–º—ñ—ó –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ!')
        await state.clear()
    else:
        return


@dp.callback_query(lambda x: x.data == 'ch_show')
async def process_callback_button2(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM dz WHERE subject=?''', ('Chemistry',))
        homework = cursor.fetchall()
        conn.commit()
        conn.close()
        if homework:
            await call.message.answer(
                f'–û—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ö—ñ–º—ñ—ó:\n  <b>{homework[0][2]}</b>\n–î–∞—Ç–∞: {homework[0][3]}', parse_mode='HTML')
        else:
            await call.message.answer('–î–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ö—ñ–º—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞ü•≥ü•≥ü•≥!')


@dp.callback_query(lambda x: x.data == 'ph_add')
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect("UsersData.sql")
        cursor = conn.cursor()
        cursor.execute("""SELECT user_name FROM members""")
        user_name = cursor.fetchall()
        conn.commit()
        conn.close()
        if call.from_user.username in str(user_name):
            await call.message.answer('–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ñ—ñ–∑–∏–∫–∏!\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')
            await state.set_state(Form.ph_homework)
        elif call.from_user.username not in user_name:
            await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!\n–ù–∞–ø–∏—à–∏ <b><i>/reg</i></b> –¥–ª—è —Ç–æ–≥–æ —â–æ–± '
                                      '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', parse_mode='HTML')


@dp.message(Form.ph_homework)
async def set_homework(message: types.Message, state: FSMContext):
    d = str(datetime.date.today()).split('-')
    date = str(d[0] + '.' + d[1] + '.' + d[2])

    print(date)
    await state.update_data(ph_homework=message.text)

    if message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''INSERT OR IGNORE INTO dz (subject) VALUES (?)''',
                       ('Physics',))
        cursor.execute('''UPDATE OR IGNORE dz SET homework=?, today=? WHERE subject=?''',
                       (message.text, date, 'Physics'))
        conn.commit()
        conn.close()
        await message.answer('–î–æ–º–∞—à–∫—É –∑ —Ñ—ñ–∑–∏–∫–∏ –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ!')
        await state.clear()
    else:
        return


@dp.callback_query(lambda x: x.data == 'ph_show')
async def process_callback_button2(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM dz WHERE subject=?''', ('Physics',))
        homework = cursor.fetchall()
        conn.commit()
        conn.close()
        if homework:
            await call.message.answer(
                f'–û—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ñ—ñ–∑–∏–∫–∏:\n  <b>{homework[0][2]}</b>\n–î–∞—Ç–∞: {homework[0][3]}', parse_mode='HTML')
        else:
            await call.message.answer('–î–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ñ—ñ–∑–∏–∫–∏ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞ü•≥ü•≥ü•≥!')


@dp.callback_query(lambda x: x.data == 'en_add')
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect("UsersData.sql")
        cursor = conn.cursor()
        cursor.execute("""SELECT user_name FROM members""")
        user_name = cursor.fetchall()
        conn.commit()
        conn.close()
        if call.from_user.username in str(user_name):
            await call.message.answer('–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó!\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')
            await state.set_state(Form.en_homework)
        elif call.from_user.username not in user_name:
            await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!\n–ù–∞–ø–∏—à–∏ <b><i>/reg</i></b> –¥–ª—è —Ç–æ–≥–æ —â–æ–± '
                                      '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', parse_mode='HTML')


@dp.message(Form.en_homework)
async def set_homework(message: types.Message, state: FSMContext):
    d = str(datetime.date.today()).split('-')
    date = str(d[0] + '.' + d[1] + '.' + d[2])

    print(date)
    await state.update_data(en_homework=message.text)

    if message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''INSERT OR IGNORE INTO dz (subject) VALUES (?)''',
                       ('English',))
        cursor.execute('''UPDATE OR IGNORE dz SET homework=?, today=? WHERE subject=?''',
                       (message.text, date, 'English'))
        conn.commit()
        conn.close()
        await message.answer('–î–æ–º–∞—à–∫—É –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ!')
        await state.clear()
    else:
        return


@dp.callback_query(lambda x: x.data == 'en_show')
async def process_callback_button2(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM dz WHERE subject=?''', ('English',))
        homework = cursor.fetchall()
        conn.commit()
        conn.close()
        if homework:
            await call.message.answer(
                f'–û—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó:\n  <b>{homework[0][2]}</b>\n–î–∞—Ç–∞: {homework[0][3]}',
                parse_mode='HTML')
        else:
            await call.message.answer('–î–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞ü•≥ü•≥ü•≥!')


@dp.callback_query(lambda x: x.data == 'uk_add')
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect("UsersData.sql")
        cursor = conn.cursor()
        cursor.execute("""SELECT user_name FROM members""")
        user_name = cursor.fetchall()
        conn.commit()
        conn.close()
        if call.from_user.username in str(user_name):
            await call.message.answer('–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏!\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')
            await state.set_state(Form.uk_homework)
        elif call.from_user.username not in user_name:
            await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!\n–ù–∞–ø–∏—à–∏ <b><i>/reg</i></b> –¥–ª—è —Ç–æ–≥–æ —â–æ–± '
                                      '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', parse_mode='HTML')


@dp.message(Form.uk_homework)
async def set_homework(message: types.Message, state: FSMContext):
    d = str(datetime.date.today()).split('-')
    date = str(d[0] + '.' + d[1] + '.' + d[2])

    print(date)
    await state.update_data(uk_homework=message.text)

    if message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''INSERT OR IGNORE INTO dz (subject) VALUES (?)''',
                       ('Ukrainian',))
        cursor.execute('''UPDATE OR IGNORE dz SET homework=?, today=? WHERE subject=?''',
                       (message.text, date, 'Ukrainian'))
        conn.commit()
        conn.close()
        await message.answer('–î–æ–º–∞—à–∫—É –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ!')
        await state.clear()
    else:
        return


@dp.callback_query(lambda x: x.data == 'uk_show')
async def process_callback_button2(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM dz WHERE subject=?''', ('Ukrainian',))
        homework = cursor.fetchall()
        conn.commit()
        conn.close()
        if homework:
            await call.message.answer(
                f'–û—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏:\n  <b>{homework[0][2]}</b>\n–î–∞—Ç–∞: {homework[0][3]}',
                parse_mode='HTML')
        else:
            await call.message.answer('–î–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–≤–æ–∏ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞ü•≥ü•≥ü•≥!')


@dp.callback_query(lambda x: x.data == 'fr_add')
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect("UsersData.sql")
        cursor = conn.cursor()
        cursor.execute("""SELECT user_name FROM members""")
        user_name = cursor.fetchall()
        conn.commit()
        conn.close()
        if call.from_user.username in str(user_name):
            await call.message.answer('–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–æ—ó –º–æ–≤–∏!\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')
            await state.set_state(Form.fr_homework)
        elif call.from_user.username not in user_name:
            await call.message.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!\n–ù–∞–ø–∏—à–∏ <b><i>/reg</i></b> –¥–ª—è —Ç–æ–≥–æ —â–æ–± '
                                      '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', parse_mode='HTML')


@dp.message(Form.fr_homework)
async def set_homework(message: types.Message, state: FSMContext):
    d = str(datetime.date.today()).split('-')
    date = str(d[0] + '.' + d[1] + '.' + d[2])

    print(date)
    await state.update_data(fr_homework=message.text)

    if message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''INSERT OR IGNORE INTO dz (subject) VALUES (?)''',
                       ('French',))
        cursor.execute('''UPDATE OR IGNORE dz SET homework=?, today=? WHERE subject=?''',
                       (message.text, date, 'French'))
        conn.commit()
        conn.close()
        await message.answer('–î–æ–º–∞—à–∫—É –∑ —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–æ—ó –º–æ–≤–∏ –±—É–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ!')
        await state.clear()
    else:
        return


@dp.callback_query(lambda x: x.data == 'fr_show')
async def process_callback_button2(call: types.CallbackQuery):
    if call.message.chat.type == 'private':
        conn = sqlite3.connect('UsersData.sql')
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM dz WHERE subject=?''', ('French',))
        homework = cursor.fetchall()
        conn.commit()
        conn.close()
        if homework:
            await call.message.answer(
                f'–û—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–æ—ó –º–æ–≤–∏:\n  <b>{homework[0][2]}</b>\n–î–∞—Ç–∞: {homework[0][3]}',
                parse_mode='HTML')
        else:
            await call.message.answer('–î–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–æ—ó –º–≤–æ–∏ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞ü•≥ü•≥ü•≥!')


@dp.message(F.text)
async def ans(message: types.Message):
    if message.chat.type == 'private':
        a = random.randint(1, 3)
        if a == 1:
            await message.answer('–ü–û–ú–û–ì–ò–¢–ï!!!!! –°–û–ó–î–ê–¢–ï–õ–¨ –ú–ï–ù–Ø –¢–†–ê–•–ê–ï–¢! –°–ü–ê–°–ò–¢–ï–ï–ï–ï–ï–ï')
        elif a == 2:
            await message.answer('–Ø —Å–∏–≥–º–∞ –Ø —Å–∏–≥–º–∞ –Ø —Å–∏–≥–º–∞ –Ø —Å–∏–≥–º–∞ –Ø —Å–∏–≥–º–∞ –Ø —Å–∏–≥–º–∞üòéüòéüòö‚ò∫Ô∏èüòö‚ò∫Ô∏è')
        else:
            await message.answer_sticker('CAACAgIAAxkBAAEEWkBmBYjbznDO6e3mdgGAJ61reFJqAgACGzoAAuzFYUtipdVq8-DmSzQE')
    else:
        return


# Show db data
def db():
    conn = sqlite3.connect('UsersData.sql')
    cursor = conn.cursor()
    cursor.execute("""SELECT * FROM members""")
    billy = cursor.fetchall()
    conn.commit()
    print(billy)
    cursor.execute('SELECT * FROM dz')
    oleg = cursor.fetchall()
    conn.commit()
    print(oleg)
    conn.close()


db()


@dp.message()
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
